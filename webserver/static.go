// Code generated by go-bindata.
// sources:
// templates/bottom.html
// templates/config.html
// templates/form_field.html
// templates/home.html
// templates/top.html
// DO NOT EDIT!

package webserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBottomHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\x2f\x29\xc9\xcf\x55\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\x02\xaa\x4b\xcd\x4b\x01\xca\x01\x02\x00\x00\xff\xff\x8a\xda\x87\x4b\x31\x00\x00\x00")

func templatesBottomHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBottomHtml,
		"templates/bottom.html",
	)
}

func templatesBottomHtml() (*asset, error) {
	bytes, err := templatesBottomHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bottom.html", size: 49, mode: os.FileMode(436), modTime: time.Unix(1441678318, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesConfigHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcd\x4e\xc3\x30\x10\x84\xcf\xe9\x53\xac\xac\x1e\x51\x72\xe0\x56\x39\xb9\x20\x7e\x4e\x80\x54\x5e\xc0\x49\x36\x8d\x25\xff\x44\xf6\xa6\x12\x0a\x7d\x77\x76\x93\x42\x11\x37\x7b\x76\x76\x3e\xed\x2c\x0b\xf4\x38\xd8\x80\xa0\xba\x18\x06\x7b\x52\x70\xb9\xec\x8a\x65\x21\xf4\x93\x33\xc4\x3a\xc5\x49\x41\xc9\xea\xae\xd0\xe3\x7d\xf3\xb0\xda\x74\xc5\x4f\x51\x86\x98\x3c\x98\x8e\x6c\x0c\xb5\xaa\x7e\x32\x3c\xd2\x18\xfb\x5a\xbd\xbf\x1d\x3f\x94\xf8\x38\x11\x92\x09\x27\x84\xbd\xbd\x83\xfd\x60\xd1\xf5\x70\xa8\xa1\x94\xfd\xf2\x49\xbe\x79\x25\x17\x00\xda\x99\x16\x5d\xc3\x1b\x9b\xaf\x7c\x46\x7a\x35\x1e\x79\x7e\x00\x5d\xfd\x9f\xbe\x90\x77\xf0\x05\xd9\x0c\x38\xca\xf3\x9a\x72\x03\xa2\x10\x31\x25\xe1\x5d\x77\x1e\x53\x8a\x49\x80\x1b\x0b\x3a\x67\x72\xae\x15\x8a\xac\xd6\x6c\xf1\xf3\xf8\x46\xc3\xd0\x8b\xd0\x26\xa8\x9a\xf5\x1e\x16\xa4\x14\x80\xa2\xd0\x36\x4c\x33\x01\x7d\x4e\x58\xab\x3c\xb7\xde\x92\x82\xb3\x71\x33\x7f\x8f\xe6\x8c\x5c\x01\xdb\x74\x25\xc7\x4a\x1b\x7f\xeb\x6d\x23\x51\xf4\x5b\xc3\xbf\x98\xdd\x77\x00\x00\x00\xff\xff\x8f\xa0\x6d\x5e\x98\x01\x00\x00")

func templatesConfigHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigHtml,
		"templates/config.html",
	)
}

func templatesConfigHtml() (*asset, error) {
	bytes, err := templatesConfigHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.html", size: 408, mode: os.FileMode(436), modTime: time.Unix(1442349315, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesForm_fieldHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\x2f\xca\x8d\x4f\xcb\x4c\xcd\x49\x51\x52\xa8\xad\xe5\xe2\xb4\xc9\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\xb5\x55\x2a\x49\xad\x28\x51\x52\xc8\x4b\xcc\x05\xb2\x81\x7a\xf4\x40\x2c\xa0\x2a\x25\x85\xb2\xc4\x9c\x52\xa8\x18\x98\x09\x12\xb4\xe3\x02\x72\x53\xf3\x52\x40\xc6\x00\x02\x00\x00\xff\xff\xe7\xfa\xb7\x2b\x61\x00\x00\x00")

func templatesForm_fieldHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForm_fieldHtml,
		"templates/form_field.html",
	)
}

func templatesForm_fieldHtml() (*asset, error) {
	bytes, err := templatesForm_fieldHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/form_field.html", size: 97, mode: os.FileMode(436), modTime: time.Unix(1442347480, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xd1\x6e\xf2\x30\x0c\x85\xaf\xf9\x9f\xc2\xca\x03\xb4\xe8\xe7\x0e\x85\x48\xdb\xe0\x62\x13\xda\x26\xb1\x17\x08\xc5\xd0\x4a\x69\x92\xd5\xee\x55\xc5\xbb\xcf\x49\x07\xed\xa6\xdd\x25\x9f\xec\x73\xec\xe3\x61\x80\x13\x9e\x1b\x8f\xa0\xea\xd0\xa2\x82\xeb\xf5\xdf\x62\x18\x18\xdb\xe8\x2c\x0b\xe5\x10\x15\x14\x42\x13\x86\xe6\x0c\x3e\x30\x14\xe8\xed\xd1\xe1\x49\xaa\x41\xd7\x2b\xa8\x9c\x25\xda\x28\xec\xba\xd0\x29\xb3\x7d\x3e\x3c\x3c\xee\x77\x5b\x5d\xd6\x2b\x03\xd2\x85\x3e\x55\x8a\x82\x8e\x46\xbe\x45\xdf\x39\xf9\xeb\x32\x9a\x91\xed\x2d\x31\x10\x5b\xee\x69\x0d\x9a\xa2\xf5\x37\xc5\xd1\x12\x3f\xa1\x90\x3f\x1f\x72\x09\xfc\x5f\x2e\x93\x31\xf5\x55\x85\x44\xd9\xc0\x11\x26\x94\x07\x98\x1c\x55\x76\x9b\x75\x26\xd3\x24\x6f\x7e\x79\xc7\xc6\x5f\x80\x9b\x16\xd7\x70\xeb\x78\x17\xf4\x21\xe4\x36\xe8\xe2\x3e\xbd\xef\xdb\xa7\xe0\xd9\x56\x9c\x04\x21\xd6\x41\xd2\x13\x78\xc4\x8e\x20\xc8\xe8\xd6\xb9\x49\x5f\x5b\xa8\x3b\x3c\x6f\x54\xc9\xe1\x72\x71\xb8\x1b\x93\xcb\xa3\xc9\x6a\xf3\x24\x4f\x0d\xa5\xf7\x8f\x85\xfc\x9d\xe4\x8d\x74\x69\xcd\x5f\xda\x63\x78\xca\xbc\x1c\xde\x5e\xbf\x93\x9c\x95\xce\xef\x79\x0c\xcc\xa1\x1d\x4f\x3a\x9d\xe6\x2b\x00\x00\xff\xff\x9c\x89\xd8\x34\x07\x02\x00\x00")

func templatesHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomeHtml,
		"templates/home.html",
	)
}

func templatesHomeHtml() (*asset, error) {
	bytes, err := templatesHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/home.html", size: 519, mode: os.FileMode(436), modTime: time.Unix(1442240879, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesTopHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\xaf\xda\x30\x0c\xc7\xcf\xf4\x53\x64\xdd\x21\x87\x51\xda\x0a\x34\x46\xd7\x74\x87\x31\xae\x43\x62\xd3\xb4\x63\x5e\xea\xd2\x88\x34\xa9\x62\x03\xaf\x42\x7c\xf7\x97\x02\x0f\xe9\x1d\x22\x3b\xf6\xdf\x3f\x5b\xf6\xe5\xc2\x6a\x68\xb4\x05\x16\x93\xeb\x63\x76\xbd\x46\xe5\xa7\xf5\xef\x9f\x7f\xfe\x6f\x7f\xb1\x96\x3a\x53\x45\xe5\xbb\x01\x59\x57\xd1\xa4\xec\x80\x24\x53\xad\xf4\x08\x24\xe2\x23\x35\xc9\xb7\xf8\x19\xb7\xb2\x03\x11\x9f\x34\x9c\x7b\xe7\x29\x66\xca\x59\x02\x1b\x74\x67\x5d\x53\x2b\x6a\x38\x69\x05\xc9\xed\x33\x65\xda\x6a\xd2\xd2\x24\xa8\xa4\x01\x91\xdf\x28\x46\xdb\x03\x6b\x3d\x34\x82\xb7\x44\x3d\x16\x69\xda\x04\x06\xce\xf6\xce\xed\x0d\xc8\x5e\xe3\x4c\xb9\x2e\x55\x88\x3f\x1a\xd9\x69\x33\x88\x7f\xce\x1f\xbe\xec\xa4\xc5\x62\x91\x65\xd3\x65\x96\x71\xe6\xc1\x08\x8e\x34\x18\xc0\x16\x80\x38\xa3\xa1\x07\xc1\x09\x5e\x69\xac\xe4\x63\xa7\x5b\x3a\x38\x93\x17\x57\x0f\xec\x12\x9c\xc9\xd8\x29\xb9\x53\x0b\xc6\x47\x2e\x1b\xb9\x7c\xca\x30\x98\x04\xc1\xeb\xe6\x7b\x10\x5e\xc3\x9b\xe1\x51\x29\x40\xbc\x57\x2a\x67\x9c\x2f\xd8\xe7\xf9\x7a\xb5\x5a\x66\x4f\x0d\x78\xef\xfc\x47\xc5\x66\xb3\xc8\xe7\x5f\x1f\x8a\x32\x7d\x4c\x51\xa6\xf7\xf5\x96\xe3\x30\xe3\xb2\xf3\x6a\xf7\x77\x1b\xa2\x79\x15\x85\x1b\x81\xad\xc3\x69\xde\x02\x00\x00\xff\xff\x90\xa1\x39\x48\xad\x01\x00\x00")

func templatesTopHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTopHtml,
		"templates/top.html",
	)
}

func templatesTopHtml() (*asset, error) {
	bytes, err := templatesTopHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/top.html", size: 429, mode: os.FileMode(436), modTime: time.Unix(1441678318, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bottom.html": templatesBottomHtml,
	"templates/config.html": templatesConfigHtml,
	"templates/form_field.html": templatesForm_fieldHtml,
	"templates/home.html": templatesHomeHtml,
	"templates/top.html": templatesTopHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bottom.html": &bintree{templatesBottomHtml, map[string]*bintree{
		}},
		"config.html": &bintree{templatesConfigHtml, map[string]*bintree{
		}},
		"form_field.html": &bintree{templatesForm_fieldHtml, map[string]*bintree{
		}},
		"home.html": &bintree{templatesHomeHtml, map[string]*bintree{
		}},
		"top.html": &bintree{templatesTopHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

